#BlueJ class context
comment0.target=Spielfeld
comment0.text=\r\n\ Beschreiben\ Sie\ hier\ die\ Klasse\ Spielfeld.\r\n\ \r\n\ @author\ (Thorben\ Thaun)\ \r\n\ @version\ (eine\ Versionsnummer\ oder\ ein\ Datum)\r\n
comment1.params=
comment1.target=Spielfeld()
comment10.params=
comment10.target=void\ routeOptimieren()
comment11.params=routeListe
comment11.target=void\ routeAbfahren(java.util.ArrayList)
comment12.params=
comment12.target=void\ pathfindingAlgorithm()
comment13.params=
comment13.target=java.util.ArrayList\ punkteEingeben()
comment14.params=punkt
comment14.target=int\ punktFinden(java.util.List)
comment14.text=\r\n\ Helfer\ Methode\ von\ punkteSortieren,\ die\ die\ aktuelle\ Liste\ von\ Punkten\ iteriert,\ um\ den\ Index\ des\ n\u00E4chsten\ Punktes\ zur\u00FCckzugeben.\r\n\ Dabei\ ist\ der\ Startpunkt\ des\ Element\ 0\r\n
comment15.params=
comment15.target=void\ punkteSortieren()
comment16.params=
comment16.target=void\ punkteAbfahren()
comment17.params=
comment17.target=java.util.ArrayList\ hindernisListeErzeugen()
comment18.params=
comment18.target=void\ hindernisseZeichnen()
comment19.params=
comment19.target=void\ kreiseZeichnen()
comment2.params=spielfeld
comment2.target=void\ OptionW\u00E4hlen(Spielfeld)
comment20.params=hindernisse\ punkte
comment20.target=void\ zeichnen(java.util.ArrayList,\ java.util.ArrayList)
comment3.params=args
comment3.target=void\ main(java.lang.String[])
comment3.text=--------------------------------------------------MAIN--------------------------------------------------------------
comment4.params=
comment4.target=void\ hindernisseUmfahren()
comment4.text=\ Hindernisse\ Umfahren\:\r\n\ \r\n\ -unser\ roboter\ hat\ die\ option\ zwischen\ 4\ verschiedenen\ bewegungsmustern\ und\ einem\ r\u00FCckw\u00E4rts-failsafe\ gang\ zu\ unterschieden\r\n\ -er\ schickt\ zuerst\ einen\ Test-Lauf\ (in\ schwaz)\ durch\ die\ Hindernisse,\ welcher\ anhand\ der\ Bewegungsmuster\ verschiedene\ Weg-Kombinationen\ probiert,\ um\ ans\ Ziel\ zu\ gelangen\r\n\ -der\ Test-Lauf\ (in\ schwarz)\ ist\ absichtlich\ sichtbar\ und\ verlangsamt,\ sodass\ man\ seinen\ fortschritt\ beobachten\ kann\r\n\ -anhand\ der\ gesammelten\ Daten\ vom\ Test-Lauf\ wird\ die\ schnellste\ Route\ berechnet\r\n\ -der\ eigentliche\ Roboter\ (in\ rot)\ folgt\ anschlie\u00DFend\ der\ schnellsten\ berechneten\ Route,\ ohne\ h\u00E4ngen\ zu\ bleiben\r\n\ \r\n\ -diese\ methode\ /\ der\ alogorithmus\ ist\ aus\ eigener\ interesse\ als\ experiment\ entstanden\ \r\nund\ geh\u00F6rt\ (in\ diesem\ umfang)\ nicht\ zu\ den\ offiziellen\ aufgaben\ des\ projekts
comment5.params=
comment5.target=boolean\ tryRechtsBewegung()
comment6.params=
comment6.target=boolean\ tryLinksBewegung()
comment7.params=
comment7.target=boolean\ tryRunterBewegung()
comment8.params=
comment8.target=boolean\ tryHochBewegung()
comment9.params=
comment9.target=boolean\ testeObImZiel()
numComments=21
